import telebot
import settings
import random
import sqlite3
import sys
from telebot import types
from translate import Translator

bot = telebot.TeleBot(settings.token)
translatorToEn = Translator(from_lang="ru", to_lang="en")
translatorToRu = Translator(from_lang="en", to_lang="ru")

try:
	db=sqlite3.connect('DataBaseTgBot.db',check_same_thread = False)
	sql=db.cursor()
	sql2=db.cursor()
	sql3=db.cursor()
	sql.execute("""CREATE TABLE IF NOT EXISTS DataBaseTgBot (
			login TEXT,
			adminstatus INT
		)""")

	db.commit()
	print("–ë–î —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
except Exception as er:
	wErorr("BD",er)
	print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ë–î.")

@bot.message_handler(commands=['start'])
def begin(message):
	markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
	item1=types.KeyboardButton("/help")
	item2=types.KeyboardButton("–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞")
	item3=types.KeyboardButton("–∫–Ω–±")
	markup.add(item1, item2, item3)

	bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç ‚ò∫ –Ø –±–æ—Ç –ê–π—Å—É!\n–ü—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {0.first_name}.\n–ü—Ä–æ–ø–∏—à–∏ /—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, —á—Ç–æ–±—ã –±—ã—Ç—å –∫—Ä—É—Ç—ã–º —á–µ–ª–æ–º".format(message.from_user,bot.get_me()),parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def AnswerForMassage(message):
	if message.text.lower()=="–ø—Ä–∏–≤–µ—Ç":
		bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç ‚ò∫ –Ø –±–æ—Ç –ê–π—Å—É. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É üòé")

	elif message.text=="/help":
		bot.send_message(message.from_user.id, "1) –Ø –º–æ–≥—É –ø—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–π –∏—Å—Ö–æ–¥ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –º–Ω–µ –Ω–∞–ø–∏—à–µ—à—å üòÆ\n </predict>[–ø—Ä–æ–±–µ–ª]<–¢–µ–∫—Å—Ç>\n2) –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üòé\n </—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è>  \n3) –ú–æ–≥—É –µ—â—ë –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π üò±\n</translatetoeng>[–ø—Ä–æ–±–µ–ª]<–¢–µ–∫—Å—Ç>\n4) –ê —Ç–∞–∫–∂–µ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π üò± \n </translatetoru>[–ø—Ä–æ–±–µ–ª]<—Ç–µ–∫—Å—Ç>\n5) –ú–æ–∂–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ \n<<–∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞>>\n<–∫–Ω–±>")

	elif "/predict" in message.text:
		if '?' in message.text:
			bot.send_message(message.from_user.id, random.choice(settings.mas))
		else:
			bot.send_message(message.from_user.id,"–ß–µ–ª, —Ç—ã..\n–ü–∏—à–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º")

	elif message.text=="–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞":
		if random.randint(1,2)==1:
			photo = open('D:\\study\\–ø–∏—Ç–æ–Ω\\TelegramBot\\pictures\\–û—Ä—ë–ª.png', 'rb')
			bot.send_photo(message.from_user.id,photo)
		else:
			photo=open('D:\\study\\–ø–∏—Ç–æ–Ω\\TelegramBot\\pictures\\–†–µ—à–∫–∞.png', 'rb')
			bot.send_photo(message.from_user.id,photo)

	elif message.text=='/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
		sql.execute(f"SELECT login FROM DataBaseTgBot WHERE login='{message.from_user.id}'")
		if (sql.fetchone() is None):
			sql.execute("INSERT INTO DataBaseTgBot VALUES (?,?)",(message.from_user.id,0))
			db.commit()
			print("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ", message.from_user.id, '\n\n')
			bot.send_message(message.from_user.id,"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
		else:
			print('–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n')
			bot.send_message(message.from_user.id,"–í—ã —É–∂–µ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

	elif message.text=='/–ê–¥–º–∏–Ω–†–µ–≥–∞ 777':
		sql.execute(f"SELECT login FROM DataBaseTgBot WHERE login='{message.from_user.id}'")
		if (sql.fetchone() is None):
			sql.execute("INSERT INTO DataBaseTgBot VALUES (?,?)",(message.from_user.id,1))
			db.commit()
			bot.send_message(message.from_user.id,"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
			print("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: "<<message.from_user.id)
		else:
			sql.execute("UPDATE DataBaseTgBot SET adminstatus = 1 WHERE adminstatus = 0")
			db.commit()
			bot.send_message(message.from_user.id,"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
			print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É\n\n")

	elif message.text=='/ReggedUsers':
		sql.execute(f"SELECT login FROM DataBaseTgBot WHERE adminstatus = ?",(1,))
		aalanguage=sql.fetchall()
		flag=False
		for row in aalanguage:
			if row[0] == str(message.from_user.id):
				flag=True
		if flag==True:
			sql.execute(f"SELECT * FROM DataBaseTgBot")
			aalanguage=sql.fetchall()
			for row in aalanguage:
				bot.send_message(message.from_user.id,row[0])
		else:
			bot.send_message(message.from_user.id,"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

	elif "/—Ä–∞—Å—Å—ã–ª–∫–∞" in message.text:
		sql.execute(f"SELECT login FROM DataBaseTgBot WHERE adminstatus = ?",(1,))
		aalanguage=sql.fetchall()
		flag=False
		for row in aalanguage:
			if row[0] == str(message.from_user.id):
				flag=True
		if flag==True:
			temp=message.text.split()
			temp.pop(0)
			temp1=""
			for i in range(0,len(temp)):
				temp1=temp1+" "+temp[i]
			sql.execute(f"SELECT login FROM DataBaseTgBot")
			aa=sql.fetchall()
			for row in aa:
				bot.send_message(row[0],temp1)		
		else:
			bot.send_message(message.from_user.id,"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

	elif message.text=='/–æ—Ñ—Ñ–±–æ—Ç–∞':
		raise SystemExit

	elif message.text=="–∫–Ω–±":
		markup=types.InlineKeyboardMarkup(row_width=2)
		item1=types.InlineKeyboardButton("–ö–∞–º–µ–Ω—å",callback_data="–ö–∞–º–µ–Ω—å")
		item2=types.InlineKeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã",callback_data="–ù–æ–∂–Ω–∏—Ü—ã")
		item3=types.InlineKeyboardButton("–ë—É–º–∞–≥–∞",callback_data="–ë—É–º–∞–≥–∞")
		markup.add(item1, item2, item3)

		bot.send_message(message.from_user.id,"–Ø –∑–∞–≥–∞–¥–∞–ª. –ù–∞–ø–∏—à–∏ —á—Ç–æ —Ç—ã –∑–∞–≥–∞–¥–∞–ª, –µ—Å–ª–∏ –Ω–µ –±–æ–∏—à—å—Å—è –ø—Ä–æ–∏–≥—Ä–∞—Ç—å üòé", reply_markup=markup)

	elif "/translatetoeng" in message.text:
		msg=message.text
		a=msg.split()
		a.pop(0)
		fortranslate=""

		for i in range(0,len(a)):
			fortranslate=fortranslate+" "+a[i]
		translated=translatorToEn.translate(fortranslate)
		bot.send_message(message.from_user.id, translated)

	elif "/translatetoru" in message.text:
		msg=message.text
		a=msg.split()
		a.pop(0)
		fortranslate=""

		for i in range(0,len(a)):
			fortranslate=fortranslate+" "+a[i]
		translated=translatorToRu.translate(fortranslate)
		bot.send_message(message.from_user.id, translated)

	else:
		bot.send_message(message.from_user.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª üòû\n –ù–∞–ø–∏—à–∏ </help>")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
	try:
		q=random.choice(settings.knb)
		if call.message:
			if call.data == '–ù–æ–∂–Ω–∏—Ü—ã' and q == '–ö–∞–º–µ–Ω—å':
				bot.send_message(call.message.chat.id,"–û–ø–∞–∞, –ø–æ–±–µ–¥–∞ –∑–∞ –º–Ω–æ–π, —É –º–µ–Ω—è –±—ã–ª –ö–∞–º–µ–Ω—å")
			elif call.data == '–ö–∞–º–µ–Ω—å' and q== '–ù–æ–∂–Ω–∏—Ü—ã':
				bot.send_message(call.message.chat.id, "–ü–æ–≤–µ–∑–ª–æ –ø–æ–≤–µ–∑–ª–æ, —É –º–µ–Ω—è –±—ã–ª–∏ –Ω–æ–∂–Ω–∏—Ü—ã..")
			elif call.data == '–ë—É–º–∞–≥–∞' and q== '–ù–æ–∂–Ω–∏—Ü—ã':
				bot.send_message(call.message.chat.id, "–ò—É—É—É—É, –ø–æ–±–µ–¥–∞ –∑–∞ –º–Ω–æ–π, —É –º–µ–Ω—è –±—ã–ª–∏ –Ω–æ–∂–Ω–∏—Ü—ã!")
			elif call.data == '–ù–æ–∂–Ω–∏—Ü—ã' and q == '–ë—É–º–∞–≥–∞':
				bot.send_message(call.message.chat.id, '–ë–ª–∏–Ω, —Ç—ã –ø–æ—Ä–µ–∑–∞–ª –º–æ—é –±—É–º–∞–≥—É >.<')
			elif call.data == '–ö–∞–º–µ–Ω—å' and q == '–ë—É–º–∞–≥–∞':
				bot.send_message(call.message.chat.id, '–•–µ—Ö–µ, –ø–æ–±–µ–¥–∞ –∑–∞ –º–Ω–æ–π, —É –º–µ–Ω—è –±—ã–ª–∞ –±—É–º–∞–≥–∞')
			elif (call.data=='–ö–∞–º–µ–Ω—å' and q=='–ö–∞–º–µ–Ω—å') or (call.data=='–ù–æ–∂–Ω–∏—Ü—ã' and q=='–ù–æ–∂–Ω–∏—Ü—ã') or (call.data=='–ë—É–º–∞–≥–∞' and q=='–ë—É–º–∞–≥–∞'):
				bot.send_message(call.message.chat.id,'–£ –Ω–∞—Å –Ω–∏—á—å—è, —Ö–º–º..')
			else:
				bot.send_message(call.message.chat.id, '–õ—è —Ç—ã –∂—É–∫, —É –º–µ–Ω—è –±—ã–ª –∫–∞–º–µ–Ω—å.. –í —ç—Ç–æ–π –±–∏—Ç–≤–µ –ø–æ–±–µ–¥–∏–ª —Ç—ã')

			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–∫–Ω–±", reply_markup=None)
	except Exception as e:
		print(repr(e))

bot.polling(none_stop=True)